#pragma once

#include "../sys/typesystem.h"

#define TID_TEMPLATE 0x0000

// Struct Definition
typedef struct T_Template {
    int a;
} T_Template;

// Struct-only Functions
int s_template_getA(T_Template t);
void s_template_setA(T_Template* t, int a);

// Local & Global Function IDs
#define FID_LOCAL_TEMPLATE_CUSTOM 0x0002
#define FID_TEMPLATE_CUSTOM t_formfun(TID_TEMPLATE, FID_LOCAL_TEMPLATE_CUSTOM)

// Params
typedef TypeInstance* F_TEMPLATE_CUSTOM_PRM;

// Custom Function Prototypes
void f_template_custom(F_TEMPLATE_CUSTOM_PRM* prm, FunCall* call);

// Default Function Prototypes
void f_template_def_create(F_DEF_CREATE_PRM* prm, FunCall* call);
void f_template_def_destroy(F_DEF_DESTROY_PRM* prm, FunCall* call);
void f_template_def_tostring(F_DEF_TOSTRING_PRM* prm, FunCall* call);
void f_template_def_serialize(F_DEF_SERIALIZE_PRM* prm, FunCall* call);
void f_template_def_deserialize(F_DEF_DESERIALIZE_PRM* prm, FunCall* call);
void f_template_def_hassub(F_DEF_HASSUB_PRM* prm, FunCall* call);
void f_template_def_getsub(F_DEF_GETSUB_PRM* prm, FunCall* call);

// Type handler and registration
bool t_template_has_func(FunID id);
void t_template_call_func(FunCall* call);
void t_template_register();

// Function Wrappers
void fw_template_custom(TypeInstance* inst);
T_Template* fw_template_getself(TypeInstance* inst);
